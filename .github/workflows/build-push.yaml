name: ManDown Build and Deploy
on:
  push:
    tags:
      - "*.*.*"

env:
  GH_TOKEN: ${{ secrets.MANDOWN_PAT }}

permissions:
  contents: write

jobs:
  build:
    name: Build and Push
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout source code"
        uses: actions/checkout@v4
    
      - name: Find Cargo tag
        run: |
          tag=$(grep "^version = " Cargo.toml | sed 's/version = "\(.*\)"/\1/')
          echo "CARGO_TAG=$tag" >> $GITHUB_ENV

      - name: Verify version consistency
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Cargo tag: $CARGO_TAG"
          echo "Tag version: $GITHUB_REF_NAME"

          if [ "$CARGO_TAG" != "$GITHUB_REF_NAME" ]; then
            # Delete the tag
            gh api -X DELETE /repos/${{ github.repository }}/git/refs/tags/$GITHUB_REF_NAME
            echo "Error: Cargo tag ($CARGO_TAG) does not match tag version ($GITHUB_REF_NAME)."
            exit 1
          fi
          echo "Version check passed."

      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          create_credentials_file: 'true'
          project_id: ${{ vars.GCP_PROJECT_ID }}
          workload_identity_provider: ${{ vars.GCP_WIF }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: gcloud
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ vars.REGISTRY_URI }}

      - name: Generate tag
        run: |
          TAG=${{ env.CARGO_TAG }}
          FULL_IMAGE_NAME="${{ vars.REPOSITORY_URI }}/mandown:$TAG"
          echo "image_name=$FULL_IMAGE_NAME" >> $GITHUB_ENV

      - name: "Build and push docker image"
        uses: docker/build-push-action@v4
        with:
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          tags: ${{ env.image_name }}
          push: true

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Set prod image variable
        run: |
          gh variable set IMAGE -b ${{ env.image_name }}

      - name: Update prod image
        run: |-
          gcloud compute instances update-container mandown \
            --zone ${{ vars.GCP_ZONE }} \
            --container-image ${{ vars.IMAGE }}

      - name: Pull image into production
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.GCP_HOST }}
          username: ${{ secrets.GCP_USER }}
          key: ${{ secrets.GCP_SECRET }}
          script: |
            sudo docker pull ${{ vars.IMAGE }}
            sudo docker stop mandown || true
            sudo docker rm mandown || true
            export TELOXIDE_TOKEN='${{ secrets.TELOXIDE_TOKEN }}'
            export MONGODB_URI='${{ secrets.MONGODB_URI }}'
            sudo docker run -d --restart on-failure \
              -e ENV=prod \
              -e FREQ=600 \
              -e TELOXIDE_TOKEN=$TELOXIDE_TOKEN \
              -e MONGODB_URI=$MONGODB_URI \
              --name mandown ${{ vars.IMAGE }}
